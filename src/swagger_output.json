{
  "swagger": "2.0",
  "info": {
    "title": "Documentação Conta365",
    "description": "Documentação do projeto de API Conta365, executado como projeto avaliativo do curso de Full Stack Web Developer do DEVinHouse(SENAI).",
    "version": "1.0.0"
  },
  "host": "localhost:5555",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/api/v1/finance/{userId}": {
      "post": {
        "tags": [
          "Financial"
        ],
        "description": "Endpoint for Insert financial data",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id to create or update Financial Data.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "file",
            "in": "formData",
            "type": "file",
            "required": true,
            "description": "Xlsx archive with the following columns (or first row) in the order presented: price-typesofexpenses-date-name",
            "accept": "/"
          }
        ],
        "responses": {
          "200": {
            "description": "Financial data created."
          },
          "404": {
            "description": "User not found."
          },
          "422": {
            "description": "The fields of the file is not valid. The correct sequence of columns is: price-typesofexpenses-date-name. No other columns besides these will be accepted."
          }
        }
      },
      "get": {
        "tags": [
          "Financial"
        ],
        "description": "Endpoint for get financial data by userId and months/years",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID for location of financial data",
            "required": true,
            "type": "integer"
          },
          {
            "name": "query",
            "in": "path",
            "description": "typesOfExpenses, filter by typesOfExpenses",
            "example": "Mercado",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Financial data by date and query."
          },
          "404": {
            "description": "Financial data not found."
          },
          "422": {
            "description": "Invalid format for userId (Only accepts Number(INT))."
          }
        }
      }
    },
    "/api/v1/finance/{userId}/{financialId}": {
      "delete": {
        "tags": [
          "Financial"
        ],
        "description": "Endpoint for delete financial data by userId and financialId",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID for location of financial data",
            "example": "12",
            "required": true,
            "type": "integer"
          },
          {
            "name": "financialId",
            "in": "path",
            "description": "Financial ID for location of financial data to delete",
            "required": true,
            "example": "649695277368",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Financial data deleted."
          },
          "404": {
            "description": "Financial data not found."
          },
          "422": {
            "description": "Invalid format for financialId (Only accepts String(UUID))."
          }
        }
      }
    },
    "/api/v1/user": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Endpoint for create a new user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "Data For user create.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Test User"
                },
                "email": {
                  "type": "string",
                  "example": "test.user@email.com"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User registered successfully."
          },
          "422": {
            "description": "Some field was not filled in correctly (with strings, or was left blank) or some field besides name and email was sent in the request."
          }
        }
      }
    },
    "/api/v1/user/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Endpoint for get a user by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Searched user id.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {}
      },
      "patch": {
        "tags": [
          "User"
        ],
        "description": "Endpoint for update a user by ID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id to update.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "obj",
            "in": "body",
            "description": "User data for update",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Test UpdateUser"
                },
                "email": {
                  "type": "string",
                  "example": "test.update@email.com"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully updated"
          },
          "404": {
            "description": "User ID not found."
          },
          "422": {
            "description": "Some field was not filled in correctly (with strings, or was left blank) or some field besides name and email was sent in the request."
          }
        }
      }
    }
  }
}